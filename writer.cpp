//
// Created by egor on 1/23/24.
//

#include "writer.h"

using namespace std;

size_t write_counter = 1;

void write_particles(const std::string & dir, std::vector<Eigen::Vector3d> const & x, std::vector<Eigen::Vector3d> const & theta, double r_part) {
    stringstream path;
    path << dir << "/particles_" << write_counter << ".vtk";
    write_counter ++;

    ofstream ofs(path.str());

    if (!ofs.good()) {
        cerr << "ERROR: Unable to create dump file" << "\n";
        exit(EXIT_FAILURE);
    }

    ofs << "# vtk DataFile Version 4.0" << "\n";
    ofs << "Generated by libFractalCommon" << "\n";
    ofs << "ASCII" << "\n";
    ofs << "DATASET POLYDATA" << "\n";
    ofs << "POINTS " << x.size() << " FLOAT" << "\n";

    // Coordinates are normalized to avoid issues with ParaView and small particles
    for (auto const & p : x) {
        ofs << p[0] / r_part << " " << p[1] / r_part << " " << p[2] / r_part << " ";
    }

    ofs << "\n" << "\n";
    ofs << "POINT_DATA " << x.size() << "\n";
    ofs << "FIELD FieldData 3" << "\n";
    ofs << "thetax 3 " << x.size() << " double" << "\n";
    for (auto const & t : theta) {
        Eigen::Matrix3d m;
        m = Eigen::AngleAxis(t[0], Eigen::Vector3d::UnitX())
            * Eigen::AngleAxis(t[1], Eigen::Vector3d::UnitY())
            * Eigen::AngleAxis(t[2], Eigen::Vector3d::UnitZ());

        auto unit = Eigen::Vector3d::UnitX();
        auto orient = m*unit;

        ofs << orient[0] << " " << orient[1] << " " << orient[2] << " ";
    }
    ofs << "\n" << "thetay 3 " << x.size() << " double" << "\n";
    for (auto const & t : theta) {
        Eigen::Matrix3d m;
        m = Eigen::AngleAxis(t[0], Eigen::Vector3d::UnitX())
            * Eigen::AngleAxis(t[1], Eigen::Vector3d::UnitY())
            * Eigen::AngleAxis(t[2], Eigen::Vector3d::UnitZ());

        auto unit = Eigen::Vector3d::UnitY();
        auto orient = m*unit;

        ofs << orient[0] << " " << orient[1] << " " << orient[2] << " ";
    }
    ofs << "\n" << "thetaz 3 " << x.size() << " double" << "\n";
    for (auto const & t : theta) {
        Eigen::Matrix3d m;
        m = Eigen::AngleAxis(t[0], Eigen::Vector3d::UnitX())
            * Eigen::AngleAxis(t[1], Eigen::Vector3d::UnitY())
            * Eigen::AngleAxis(t[2], Eigen::Vector3d::UnitZ());

        auto unit = Eigen::Vector3d::UnitZ();
        auto orient = m*unit;

        ofs << orient[0] << " " << orient[1] << " " << orient[2] << " ";
    }
    // Flush the buffer
    ofs << std::endl;
}
